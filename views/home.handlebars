{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container flex">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form half">
            <!-- make a header here -->

            <h2 class="text-align">List a New Item</h2>

            <form action="/posts" method="POST" enctype="multipart/form-data" class="flex flex-col gap">
                <!-- title input field name = "title" -->
                <!-- text area input field name = "content" -->
                <input type="text" placeholder="Title" name="title" required>
                <textarea name="content" rows="25" cols="25" placeholder="Today I ate a Burrito and..." required></textarea>

                <!-- file input field for image upload -->
                <input type="file" name="image" accept="image/*">

                <div class="form-actions flex gap-sm">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <input type="text" id="emoji-search" placeholder="Search emojis..." oninput="searchEmojis()" class="emoji-search full">
                <div id="emoji-grid"></div>
            </div>
        </section>

        <section class="posts-list half">
            <!-- recent posts -->

            <h2 class="text-align">Recent Items for Sale</h2>

            <div class="sort-options text-align">
                <label for="sort-by">Sort by:</label>
                <select id="sort-by" onchange="changeSort()">
                    <option value="newest" {{#if (eq sortBy 'newest')}}selected{{/if}}>Newest</option>
                    <option value="oldest" {{#if (eq sortBy 'oldest')}}selected{{/if}}>Oldest</option>
                    <option value="most-likes" {{#if (eq sortBy 'most-likes')}}selected{{/if}}>Most Likes</option>
                    <option value="least-likes" {{#if (eq sortBy 'least-likes')}}selected{{/if}}>Least Likes</option>
                </select>
            </div>

            {{#if posts.length}}
            <ul id="posts-list" class="flex flex-col gap align-center">
                {{#each posts}}
                    {{> post this user=../user}}            
                {{/each}}
            </ul>
            {{else}}
                <!-- no posts, oh no, what now? -->
            {{/if}}
        </section>

    {{else}}
        <section class="posts-list flex flex-col full align-center">
        <!-- recent posts -->

            <h2>Recent Items for Sale</h2>

            {{#if posts.length}}
            <ul class="flex flex-col gap-lg">
                {{#each posts}}
                    <!-- you have to pass the user in to posts and this is the syntax -->
                    {{> post this user=../user}}            
                {{/each}}
            </ul>
            {{else}}
                <!-- no posts, oh no, what now? -->
            {{/if}}
        </section>
    {{/if}}
</section>


{{! JavaScript for Emoji Integration }}
<script>

/*
 You want to show a subset of the emojis. About 200. However,
 you also want the user to be able to search all emojis,
 so, put them in this array when the array is empty so 
 that you have them.
*/

function changeSort() {
        const sortBy = document.getElementById('sort-by').value;
        const url = new URL(window.location);
        url.searchParams.set('sortBy', sortBy);
        window.location = url.toString();
}

let allEmojis = [];  // Global list to hold all emojis

async function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';

    let apiKey = "{{ apiKey }}"

    if(container.style.display === 'block' && allEmojis.length == 0){
        const res = await fetch(`https://emoji-api.com/emojis?access_key=${apiKey}`);
        const data = await res.json();
        console.log('here', data);
        allEmojis = data;
    }
}

function displayEmojis(emojis,limit=200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji => emoji.slug.includes(searchTerm));
    displayEmojis(filteredEmojis);
}


function insertEmoji(emoji) {
    const textarea = document.querySelector('textarea[name="content"]');
    textarea.value += emoji;
    textarea.focus();  // Keep focus on the textarea
}
</script>